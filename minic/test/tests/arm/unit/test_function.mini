struct A
{
    int i;
};

fun add4(int a, int b, int c, int d) int {
    return a + b + c + d;
}

fun add6(int a, int b, int c, int d, int e, int f) int {
    return a + b + c + d + e + f;
}

fun addsub6(int a, int b, int c, int d, int e, int f) int {
    return a - b + c - d + e - f;
}

fun addStructs(struct A a, struct A b) int {
    return a.i + b.i;
}

fun expectsNull(struct A a) bool {
    if (a == null) {
        return true;
    } else {
        return false;
    }
}

fun recurse(int n) void {
    if (n <= 0) {
        print n endl;
    } else {
        print n;
        recurse(n - 1);
    }
}

fun printBool(bool b, bool lb) void {
    if (b) {
        if (lb) {
            print 1 endl;
        } else {
            print 1;
        }

    } else {
        if (lb) {
            print 0 endl;
        } else {
            print 0;
        }
    }
}

# Expected output
# add4: 10 0 0 20 20 8
# add6: 21 0 0 20 20 16
# addsub6: -3 3
# addStruct: 0 0 4
# null: 0 1 1
# recurse0: 0
# recurse1: 1 0
# recurse2: 2 1 0
# recurse3: 3 2 1 0


fun main() int
{
    struct A a, x;
    int i;
    bool b;

    # add4: 10 0 0 20 20 8
    print add4(1, 2, 3, 4);
    print add4(0, 0, 0, 0);
    print add4(1, -1, 1, -1);
    print add4(0, 0, 0, 20);
    print add4(20, 0, 0, 0);
    print add4(1 + 1,  4 - 2, 2 * 1, 4 / 2) endl;

    # add6: 21 0 0 20 20 16
    print add6(1, 2, 3, 4, 5, 6);
    print add6(0, 0, 0, 0, 0 , 0);
    print add6(1, -1, 1, -1, 1, -1);
    print add6(0, 0, 0, 0, 0, 20);
    print add6(20, 0, 0, 0, 0, 0);
    print add6(1 + 1,  4 - 2, 2 * 1, 4 / 2, 4, 1 + 1 + 1 + 1) endl;

    # addsub6: -3 3
    print addsub6(1, 2, 3, 4, 5, 6);
    print addsub6(6, 5, 4, 3, 2, 1) endl;

    # addStruct: 0 0 4
    a = new A;
    a.i = 0;
    x = new A;
    x.i = 0;
    print addStructs(a, x);
    a.i = 1;
    x.i = -1;
    print addStructs(a, x);
    a.i = 2;
    x.i = 2;
    print addStructs(a, x) endl;
    
    # null: 0 1 1
    a = new A;
    printBool(expectsNull(a), false);
    printBool(expectsNull(null), false);
    a = null;
    printBool(expectsNull(a), true);

    # recurse0: 0
    recurse(0);

    # recurse1: 1 0
    recurse(1);

    # recurse2: 2 1 0
    recurse(2);

    # recurse3: 3 2 1 0
    recurse(3);


    return 0;
}
